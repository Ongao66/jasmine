name: Build ARM64 AppImage on ARM64 Ubuntu

on:
  workflow_dispatch:

env:
  RUST_TOOLCHAIN: nightly-2024-12-02
  FLUTTER_VERSION: '3.13.0'  # 使用更新的 Flutter 版本确保 ARM64 支持

jobs:
  build_linux_arm64:
    name: Build Linux ARM64
    runs-on: ubuntu-22.04-arm64  # 使用 ARM64 架构的 runner

    steps:
      - name: Checkout with submodules
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            curl \
            file \
            git \
            libfuse2 \
            libgl1-mesa-dev \
            libgtk-3-dev \
            liblzma-dev \
            ninja-build \
            pkg-config \
            unzip \
            xz-utils \
            zip \
            clang \
            cmake \
            libssl-dev

      - name: Setup Rust toolchain
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y \
            --default-toolchain ${{ env.RUST_TOOLCHAIN }} \
            --target aarch64-unknown-linux-gnu
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
          source $HOME/.cargo/env

      - name: Install AppImage tools
        run: |
          curl -LO https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-aarch64.AppImage
          chmod +x appimagetool-aarch64.AppImage
          sudo mv appimagetool-aarch64.AppImage /usr/local/bin/appimagetool

      - name: Install Flutter ARM64
        run: |
          # 克隆 Flutter 仓库（ARM64 兼容）
          git clone https://github.com/flutter/flutter.git -b stable --depth 1
          echo "${GITHUB_WORKSPACE}/flutter/bin" >> $GITHUB_PATH
          
          # 配置 Flutter
          flutter config --no-analytics
          flutter precache
          flutter doctor -v

      - name: Build Rust library
        run: |
          cd native/jmbackend
          cargo build --release
          cp target/release/librust.a ../../linux/
          cbindgen src/lib.rs -l c++ > ../../linux/rust.h
          cd ../..

      - name: Build Flutter application
        run: |
          flutter config --enable-linux-desktop
          flutter clean
          flutter pub get
          flutter build linux --release
          
          # 准备 AppImage
          mv build/linux/arm64/release/bundle/jasmine build/linux/arm64/release/bundle/AppRun
          chmod +x build/linux/arm64/release/bundle/AppRun
          cp linux/appimage/* build/linux/arm64/release/bundle/
          
          # 创建 AppImage
          appimagetool build/linux/arm64/release/bundle/
          mv Jasmine*.AppImage jasmine-arm64.AppImage

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: jasmine-arm64.AppImage
          path: jasmine-arm64.AppImage
          retention-days: 3
